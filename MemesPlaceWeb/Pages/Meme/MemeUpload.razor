@page "/upload"
@inject NavigationManager nav
@inject IJSRuntime JSRuntime
@inject IMemesService memeService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using System.ComponentModel.DataAnnotations
@using MemesPlaceWeb.Providers;
@implements IAsyncDisposable
<h3 style=" text-align: center;">MemeUpload</h3>

@if (!string.IsNullOrEmpty(message))
{

    <div class="alert-danger">@message</div>
}

<MudStack Justify="Justify.Center" Class="p-4">
    <div @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" @ref="dropZoneElement" Outlined="true" Class="@DragClass">
        @if (!Clearing)
        {
            <InputFile OnChange="OnInputFileChanged" @ref="inputFile" multiple class="absolute mud-width-full mud-height-full overflow-hidden z-2" style="opacity:0;" />
        }
        <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
 
    </div>
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="MemePost" Disabled="@(!memes.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
        <MudButton OnClick="Clear" Disabled="@(!memes.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
    </MudToolBar>

    
                        @foreach (var file in memes)
                        {
        <MudItem Style="position: relative;align-self: center;">
                            
                               
                                     <MudCard >
                                        <MudCardContent Style="text-align:center; height:800;width:fit-content; max-height: 800px;">
                                            <MudTextField Label="Title"
                                                      @bind-Value="file.Name" For="@(() => file.Name)" />
                                            <MudTextField Label="Description" Class="mt-3"
                                                      @bind-Value="file.Description" For="@(() => file.Description)" />
                                                      <MudTextField Label="Tags" Class="mt-3"
                                                      @bind-Value="file.Tags" For="@(() => file.Tags)" />
                                           @if(file.IsVideo)
                    {
                        <video src=" @FormImgtoUrl(file.Imgfile)" height="600px"/>
                    }else
                    {
                         <img src="@FormImgtoUrl(file.Imgfile)" height="600px"/>
                    }
                   
                                            

                                        </MudCardContent>

                                    </MudCard>
                               </MudItem>
                        }

   
    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="MemePost" Disabled="@(!memes.Any()&!IsTaskRunning)" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
        <MudButton OnClick="Clear" Disabled="@(!memes.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
    </MudToolBar>
</MudStack>


@code {
    string message;
    bool IsTaskRunning = false;
    List<MemeAddDTO> memes = new List<MemeAddDTO>();

    private bool Clearing = false;
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string DragClass = DefaultDragClass;
    ElementReference dropZoneElement;
    InputFile inputFile;

    IJSObjectReference _module;
    IJSObjectReference _dropZoneInstance;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the JS file
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./FileDrop.js");

            // Initialize the drop zone
            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, inputFile.Element);
        }
    }

    private async void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        try
        {

            ClearDragClass();
            var files = e.GetMultipleFiles(20);
            foreach (var file in files)
            {
                var buffers = new byte[file.Size];
                await file.OpenReadStream(209715200).ReadAsync(buffers);

                memes.Add(new MemeAddDTO
                    {
                        Imgfile = new ImageFile { Data = buffers, Format = file.ContentType, Size = file.Size },
                        IsFile = true,
                        IsVideo = (file.ContentType.Contains("mp4") || file.ContentType.Contains("mkv") || file.ContentType.Contains("avi") || file.ContentType.Contains("webm") || file.ContentType.Contains("mov") || file.ContentType.Contains("quicktime") ? true : false)
                    });
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            bool? result = await DialogService.ShowMessageBox(
             "Error",
             $"Error on selecting file, {ex.Message}"
             );
            StateHasChanged();
        }

    }

    private async Task Clear()
    {
        Clearing = true;
        memes.Clear();
        ClearDragClass();
        await Task.Delay(100);
        Clearing = false;
    }


    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }
    private string FormImgtoUrl(ImageFile file)
    {
        return $"data:{file.Format};base64,{Convert.ToBase64String(file.Data)}";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
    private async Task MemePost()
    {


        //  await MessageService.Info("Thank you for filling the form.");
        try
        {
            IsTaskRunning = true;
            var response = await memeService.AddMeme(memes);
            if (response.Any(a => a.IsSuccess))
            {
                nav.NavigateTo("/");
            }
            else
            {
                bool? result = await DialogService.ShowMessageBox(
          "Error",
          $"Error on selecting file, {response.FirstOrDefault().Error}"
          );
            }
            IsTaskRunning = false;

        }
        catch (ApiException ex)
        {
            bool? result = await DialogService.ShowMessageBox(
             "Error",
             $"Error on selecting file, {ex.Message}"
             );
            message = ex.Message;
            IsTaskRunning = false;
        }

    }
    public async ValueTask DisposeAsync()
    {
        if (_dropZoneInstance != null)
        {
            await _dropZoneInstance.InvokeVoidAsync("dispose");
            await _dropZoneInstance.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }
}

    



