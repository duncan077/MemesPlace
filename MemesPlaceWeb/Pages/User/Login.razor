@page "/users/login"
@inject NavigationManager nav
@inject IAuthService auth
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
<h3>Login</h3>


@if (!string.IsNullOrEmpty(message))
{

    <div class="alert-danger">@message</div>
}
<EditForm Model="@loginModel" OnValidSubmit="@LoginPost">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="UserName"
                                  @bind-Value="loginModel.UserName" For="@(() => loginModel.UserName)" />
               
                <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="loginModel.Password" For="@(() => loginModel.Password)" InputType="InputType.Password" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color="Color.Success">Success</MudText>
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            Fill out the form correctly to see the success message.
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>


@code {
  bool success=false;

    LoginUserDTO loginModel = new LoginUserDTO();
    string message = string.Empty;
    private async Task LoginPost()
    {

        try
        {
            
            
            
                var response = await auth.AuthAsync(loginModel);
                if (response)
                {
                    nav.NavigateTo("/");
                }
            
            message = "Invalid Login. Please try again";
        }
        catch (ApiException ex)
        {
            message = ex.Message;

            }
            
        
    }
    ExternalAuthDto googleLogin = new ExternalAuthDto();
    private async Task GoogleLoginPost()
    {
        var accessTokenRequest = "https://accounts.google.com/o/oauth2/v2/auth?";

        accessTokenRequest += $"scope=email&";
        accessTokenRequest += $"client_id=222814136008-0c3t1h5johchc2lnecet2nfbmjnjr535.apps.googleusercontent.com&";
        accessTokenRequest += $"redirect_uri=https://localhost:7196/users/login&";
        accessTokenRequest += $"access_type=online&";
        accessTokenRequest += $"nonce=sdf4gdfg&";
        accessTokenRequest += $"response_type=id_token&";
        accessTokenRequest += $"state=state_parameter_passthrough_value";


        nav.NavigateTo(accessTokenRequest, true);
    }
    protected override async Task OnInitializedAsync()
    {
        Microsoft.Extensions.Primitives.StringValues _idToken ;
        
        if (QueryHelpers.ParseQuery(nav.Uri).TryGetValue("id_token", out _idToken))
        {
            try
            {
                var response = await auth.AuthGoogleAsync(_idToken);
                if (response)
                {
                    nav.NavigateTo("/");
                }
                message = "Invalid Login. Please try again";
            }
            catch (ApiException ex)
            {
                message = ex.Message;

            }


        }
        
    }


}
