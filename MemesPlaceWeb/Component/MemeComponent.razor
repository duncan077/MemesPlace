@inject IMemesService memeService
@inject NavigationManager nav
@using System.Security.Claims
<HeadContent>
    <meta property="og:title" content="@meme.Name" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://memesplacedemo.azurewebsites.net/" />
    <meta property="og:image" content="@meme.Urlimg" />
</HeadContent>
<MudCard Elevation="1" >
    <MudCardHeader>
        <CardHeaderAvatar  >
            <MudItem Style="text-align:center;">
            <MudAvatar onclick="@PlClick" Color="Color.Secondary" Image="@meme.ImgProfile"></MudAvatar>
            <MudText onclick="@PlClick">@meme.UserName</MudText></MudItem>
        </CardHeaderAvatar>
        <CardHeaderContent>

            <MudButton Style="width: -webkit-fill-available;" OnClick="@BnClick">@meme.Name</MudButton>
         
            
            <MudText Typo="Typo.body2">@meme.Description</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <AuthorizeView>
                <Authorized>
                    @if (context.User.Identity.Name == meme.UserName)
                    {
                        <MudMenu Icon="@Icons.Material.Filled.Settings">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" />
                        </MudMenu>
                    }
                </Authorized>

            </AuthorizeView>
           
        </CardHeaderActions>
    </MudCardHeader>
 
    
    <MudCardContent  Style="text-align: center; ">
        @if (meme.IsVideo)
        {

            <video controls="" style="max-height: 800px;width: -webkit-fill-available;" name="media" ><source src="@meme.Urlimg" type="@meme.Format"></video>
        }
        else
        {
            <MudImage  ondblclick="@imgClick" onclick="@BnClick"  ObjectFit="ObjectFit.ScaleDown" ObjectPosition="ObjectPosition.Center" Height="600" Src="@meme.Urlimg" Style="max-height: 800px; width: -webkit-fill-available;"></MudImage>
        }</MudCardContent>
        <MudCardContent  Class="m-lg-1">
           @foreach (var tag in meme.Tags)
        {
            <MudButton>@tag</MudButton>
        }

        </MudCardContent>
        
    
    <MudCardActions>
        @if(meme.Like){
            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Error" OnClick="Like" />
        }else{
            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" OnClick="Like" />
        }
       
        <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" Href="@Share" data-action="share/whatsapp/share" />
        <MudText >Likes @meme.LikeCount</MudText>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public MemeDTO meme { get; set; } = new MemeDTO() {Like=false, Tags=new List<string>() };
    [Parameter]
    public bool IsFull { get; set; } = false;
    private string Share = "";
    [Inject] private IDialogService DialogService { get; set; }



    private DialogOptions dialogOptions = new() { FullWidth = true };
    protected override async Task OnParametersSetAsync()
    {
        Share = $"https://api.whatsapp.com/send?text=https://memesplacedemo.azurewebsites.net/Meme/{meme.Id}";
        StateHasChanged();
    }
    private async Task Like()
    {
        var response = await memeService.Like(meme.Id);
        if (!response.IsSuccess)
        {
            bool? result = await DialogService.ShowMessageBox(
              "Warning",
              "Error Liking the meme"
              );


        }
        meme.Like =response.Data;
        StateHasChanged();
    }
    private async Task Delete()
    {
        var response = await memeService.Delete(meme.Id);
        if (!response.IsSuccess)
        {
            bool? result = await DialogService.ShowMessageBox(
              "Warning",
              "Error deleting the meme"
              );
        }
        else
        {
            nav.NavigateTo("", true);
        }
    }
    private async void BnClick()
    {
        if (!IsFull)
        // nav.NavigateTo($"/Meme/{meme.Id}");
        {
            var options =  new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
            var parameters = new DialogParameters{["meme"] = meme};
            DialogService.Show<MemeModal>("", parameters, options);
        }
    }
    private void PlClick()
    {
        
            nav.NavigateTo($"/users/profile/{meme.UserName}");
    }
    private async void imgClick()
    {
        await Like();

    }
}
